# -*- coding: utf-8 -*-
"""exercise_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h0DT8VmamAOqfrDrdAC2FesK2voXu1OR
"""

import math
conv = math.pi/180

class cuerda_extra:
  def __init__(self,t_n=0, a_n=0):
    self.t_n = t_n #tensión variable
    self.a_n = a_n #angulo variable
  def compy(self):
    T_y=self.t_n * math.sin(self.a_n*conv) #componente en y
    return T_y
  def compx(self):
    T_x=self.t_n * math.cos(self.a_n*conv) #componente en x
    return T_x

#AGREGAR CUERDA EXTRA AQUÍ
#tv_n=cuerda_extra(tensión, angulo), para n impar 180<=a_n<=90 y para n par 90<=a_n<=0.
tensiones=[
          cuerda_extra(50,120),
          cuerda_extra(70,50)
          ]

print("Para las cuerdas agregadas se tiene:")
print("")
S_x = 0.0 #S_x es la sumatoria de componentes horizontales de las cuerdas.
for i in tensiones:
    S_x += i.compx()
print("Sumatoria S_x de fuerzas en eje x:",round(S_x,4), "newtons")

S_y = 0.0 #S_y es la sumatoria de componentes verticales de las cuerda.
for i in tensiones:
    S_y += i.compy()
print("Sumatoria S_y de fuerzas en eje y:",round(S_y,4), "newtons")



class Tensiones1y2:
  def __init__(self,a1=0,a2=0,W=0):
    self.a1 = a1 #ángulo de tensión T_1 con 90<=a1<=0
    self.a2 = a2 #ángulo de tensión T_2 con 90<=a2<=0
    self.W = W
  def calculoT_2(self):
    T2=(self.W*math.cos(self.a1*conv)-((S_x*math.sin(self.a1*conv))+(S_y*math.cos(self.a1*conv))))/(math.sin((self.a1+self.a2)*conv))
    return T2
  def calculoT_1(self):
    T1=(self.calculoT_2()*math.cos(self.a2*conv)+S_x)/(math.cos(self.a1*conv))
    return T1

t= Tensiones1y2(40,32,1500)

print("Valor de tensión T_1:",round(t.calculoT_2(),2),"Newtons")
print("Valor de tensión T_2:",round(t.calculoT_1(),2),"Newtons")